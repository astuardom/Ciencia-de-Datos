"""
Reto 3: Eficiencia de un Nuevo Medicamento
An√°lisis estad√≠stico para probar la eficacia de un medicamento en la reducci√≥n de presi√≥n arterial
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import pandas as pd

def analizar_eficiencia_medicamento():
    """
    Analiza la eficiencia de un nuevo medicamento para reducir la presi√≥n arterial
    """
    
    print("=" * 70)
    print("RETO 3: EFICIENCIA DE UN NUEVO MEDICAMENTO")
    print("=" * 70)
    
    # ===================================================
    # DATOS DEL PROBLEMA
    # ===================================================
    
    # Par√°metros de la muestra
    n = 40                    # Tama√±o de la muestra
    x_barra = 118            # Media muestral (mmHg)
    s = 6                    # Desviaci√≥n est√°ndar muestral (mmHg)
    mu_0 = 120               # Media poblacional hipot√©tica (mmHg)
    alpha = 0.05             # Nivel de significancia
    df = n - 1               # Grados de libertad
    
    print(f"\nüìä DATOS DEL ESTUDIO:")
    print(f"   ‚Ä¢ Tama√±o de muestra: {n} pacientes")
    print(f"   ‚Ä¢ Presi√≥n arterial promedio observada: {x_barra} mmHg")
    print(f"   ‚Ä¢ Desviaci√≥n est√°ndar: {s} mmHg")
    print(f"   ‚Ä¢ Presi√≥n arterial objetivo del laboratorio: {mu_0} mmHg")
    print(f"   ‚Ä¢ Nivel de significancia: Œ± = {alpha}")
    
    # ===================================================
    # PASO 1: ESTABLECER HIP√ìTESIS
    # ===================================================
    
    print(f"\nüî¨ PASO 1: HIP√ìTESIS")
    print(f"   H‚ÇÄ: Œº = {mu_0} mmHg (El medicamento NO reduce la presi√≥n a {mu_0} mmHg)")
    print(f"   H‚ÇÅ: Œº < {mu_0} mmHg (El medicamento S√ç reduce la presi√≥n por debajo de {mu_0} mmHg)")
    print(f"   ‚Üí Prueba UNILATERAL (cola izquierda)")
    
    # ===================================================
    # PASO 2: NIVEL DE SIGNIFICANCIA Y TIPO DE PRUEBA
    # ===================================================
    
    print(f"\nüìà PASO 2: NIVEL DE SIGNIFICANCIA")
    print(f"   ‚Ä¢ Œ± = {alpha} ({alpha*100}%)")
    print(f"   ‚Ä¢ Tipo de prueba: UNILATERAL (cola izquierda)")
    print(f"   ‚Ä¢ Grados de libertad: df = {n} - 1 = {df}")
    
    # ===================================================
    # PASO 3: CALCULAR ESTAD√çSTICA DE PRUEBA
    # ===================================================
    
    # F√≥rmula: t = (xÃÑ - Œº‚ÇÄ) / (s/‚àön)
    t_stat = (x_barra - mu_0) / (s / np.sqrt(n))
    
    print(f"\nüßÆ PASO 3: ESTAD√çSTICA DE PRUEBA")
    print(f"   F√≥rmula: t = (xÃÑ - Œº‚ÇÄ) / (s/‚àön)")
    print(f"   t = ({x_barra} - {mu_0}) / ({s}/‚àö{n})")
    print(f"   t = {x_barra - mu_0} / {s / np.sqrt(n):.4f}")
    print(f"   t = {t_stat:.4f}")
    
    # ===================================================
    # PASO 4: VALOR CR√çTICO Y VALOR P
    # ===================================================
    
    # Para prueba unilateral (cola izquierda), usamos alpha directamente
    t_critical = stats.t.ppf(alpha, df)
    p_value = stats.t.cdf(t_stat, df)
    
    print(f"\nüìä PASO 4: VALOR CR√çTICO Y VALOR P")
    print(f"   ‚Ä¢ Valor cr√≠tico (t‚ÇçŒ±,df‚Çé): t‚Çç{alpha},{df}‚Çé = {t_critical:.4f}")
    print(f"   ‚Ä¢ Valor p: P(T ‚â§ {t_stat:.4f}) = {p_value:.4f}")
    
    # ===================================================
    # PASO 5: DECISI√ìN Y CONCLUSI√ìN
    # ===================================================
    
    print(f"\nüéØ PASO 5: DECISI√ìN Y CONCLUSI√ìN")
    
    # Criterio 1: Comparar estad√≠stico de prueba con valor cr√≠tico
    if t_stat < t_critical:
        decision_critico = "RECHAZAR H‚ÇÄ"
        conclusion_critico = "El medicamento S√ç reduce significativamente la presi√≥n arterial"
    else:
        decision_critico = "NO RECHAZAR H‚ÇÄ"
        conclusion_critico = "No hay evidencia suficiente para afirmar que el medicamento reduce la presi√≥n"
    
    # Criterio 2: Comparar valor p con nivel de significancia
    if p_value < alpha:
        decision_pvalue = "RECHAZAR H‚ÇÄ"
        conclusion_pvalue = "El valor p es menor que Œ±, evidencia estad√≠sticamente significativa"
    else:
        decision_pvalue = "NO RECHAZAR H‚ÇÄ"
        conclusion_pvalue = "El valor p es mayor que Œ±, no hay evidencia estad√≠sticamente significativa"
    
    print(f"   üìã Criterio del valor cr√≠tico:")
    print(f"      ‚Ä¢ Decisi√≥n: {decision_critico}")
    print(f"      ‚Ä¢ Justificaci√≥n: t = {t_stat:.4f} {'<' if t_stat < t_critical else '‚â•'} {t_critical:.4f}")
    print(f"      ‚Ä¢ Conclusi√≥n: {conclusion_critico}")
    
    print(f"\n   üìã Criterio del valor p:")
    print(f"      ‚Ä¢ Decisi√≥n: {decision_pvalue}")
    print(f"      ‚Ä¢ Justificaci√≥n: p = {p_value:.4f} {'<' if p_value < alpha else '‚â•'} {alpha}")
    print(f"      ‚Ä¢ Conclusi√≥n: {conclusion_pvalue}")
    
    # ===================================================
    # VISUALIZACI√ìN
    # ===================================================
    
    print(f"\nüìä VISUALIZACI√ìN DE LA PRUEBA")
    
    # Generar valores para la distribuci√≥n t
    x = np.linspace(-4, 2, 200)
    y = stats.t.pdf(x, df)
    
    # Crear la gr√°fica
    plt.figure(figsize=(12, 8))
    
    # Distribuci√≥n t
    plt.plot(x, y, 'b-', linewidth=2, label=f'Distribuci√≥n t(df={df})')
    
    # Regi√≥n de rechazo (cola izquierda)
    plt.fill_between(x, y, where=x <= t_critical, color='red', alpha=0.3, 
                     label=f'Regi√≥n de rechazo (Œ± = {alpha})')
    
    # Estad√≠stico de prueba
    plt.axvline(t_stat, color='green', linestyle='--', linewidth=2, 
                label=f'Estad√≠stico de prueba: t = {t_stat:.4f}')
    
    # Valor cr√≠tico
    plt.axvline(t_critical, color='red', linestyle=':', linewidth=2, 
                label=f'Valor cr√≠tico: t = {t_critical:.4f}')
    
    # Configuraci√≥n de la gr√°fica
    plt.title('Prueba t Unilateral: Eficiencia del Medicamento\nH‚ÇÄ: Œº = 120 vs H‚ÇÅ: Œº < 120', 
              fontsize=14, fontweight='bold')
    plt.xlabel('Valores de t', fontsize=12)
    plt.ylabel('Densidad de probabilidad', fontsize=12)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    
    # Agregar anotaciones
    plt.annotate(f'p = {p_value:.4f}', xy=(t_stat, stats.t.pdf(t_stat, df)), 
                xytext=(t_stat-1, stats.t.pdf(t_stat, df)+0.02),
                arrowprops=dict(arrowstyle='->', color='green'),
                fontsize=10, color='green')
    
    plt.tight_layout()
    plt.show()
    
    # ===================================================
    # RESUMEN FINAL
    # ===================================================
    
    print(f"\n" + "=" * 70)
    print(f"üìã RESUMEN FINAL")
    print(f"=" * 70)
    
    print(f"   üéØ HIP√ìTESIS:")
    print(f"      H‚ÇÄ: Œº = {mu_0} mmHg")
    print(f"      H‚ÇÅ: Œº < {mu_0} mmHg")
    
    print(f"\n   üìä RESULTADOS:")
    print(f"      ‚Ä¢ Estad√≠stico de prueba: t = {t_stat:.4f}")
    print(f"      ‚Ä¢ Valor cr√≠tico: t‚Çç{alpha},{df}‚Çé = {t_critical:.4f}")
    print(f"      ‚Ä¢ Valor p: {p_value:.4f}")
    
    print(f"\n   ‚úÖ DECISI√ìN:")
    if p_value < alpha:
        print(f"      RECHAZAR H‚ÇÄ al nivel de significancia Œ± = {alpha}")
        print(f"      ‚Üí El medicamento S√ç reduce significativamente la presi√≥n arterial")
        print(f"      ‚Üí La afirmaci√≥n del laboratorio es CORRECTA")
    else:
        print(f"      NO RECHAZAR H‚ÇÄ al nivel de significancia Œ± = {alpha}")
        print(f"      ‚Üí No hay evidencia suficiente para afirmar que el medicamento reduce la presi√≥n")
        print(f"      ‚Üí La afirmaci√≥n del laboratorio NO puede ser confirmada")
    
    print(f"\n   üí° INTERPRETACI√ìN:")
    print(f"      Con {alpha*100}% de confianza, {'existe' if p_value < alpha else 'no existe'} evidencia")
    print(f"      estad√≠stica suficiente para concluir que el medicamento reduce la presi√≥n arterial")
    print(f"      por debajo de {mu_0} mmHg.")

if __name__ == "__main__":
    analizar_eficiencia_medicamento() 